{"ast":null,"code":"/**\n * dd-gridstack.ts 10.1.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\nimport { Utils } from './utils';\nimport { DDManager } from './dd-manager';\nimport { DDElement } from './dd-element';\n// let count = 0; // TEST\n/**\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\n */\nexport class DDGridStack {\n  resizable(el, opts, key, value) {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n      } else if (opts === 'destroy') {\n        dEl.ddResizable && dEl.cleanResizable();\n      } else if (opts === 'option') {\n        dEl.setupResizable({\n          [key]: value\n        });\n      } else {\n        const n = dEl.el.gridstackNode;\n        const grid = n.grid;\n        let handles = dEl.el.getAttribute('gs-resize-handles') || grid.opts.resizable.handles || 'e,s,se';\n        if (handles === 'all') handles = 'n,e,s,w,se,sw,ne,nw';\n        // NOTE: keep the resize handles as e,w don't have enough space (10px) to show resize corners anyway. limit during drag instead\n        // restrict vertical resize if height is done to match content anyway... odd to have it spring back\n        // if (Utils.shouldSizeToContent(n, true)) {\n        //   const doE = handles.indexOf('e') !== -1;\n        //   const doW = handles.indexOf('w') !== -1;\n        //   handles = doE ? (doW ? 'e,w' : 'e') : (doW ? 'w' : '');\n        // }\n        const autoHide = !grid.opts.alwaysShowResizeHandle;\n        dEl.setupResizable({\n          ...grid.opts.resizable,\n          ...{\n            handles,\n            autoHide\n          },\n          ...{\n            start: opts.start,\n            stop: opts.stop,\n            resize: opts.resize\n          }\n        });\n      }\n    });\n    return this;\n  }\n  draggable(el, opts, key, value) {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n      } else if (opts === 'destroy') {\n        dEl.ddDraggable && dEl.cleanDraggable();\n      } else if (opts === 'option') {\n        dEl.setupDraggable({\n          [key]: value\n        });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        dEl.setupDraggable({\n          ...grid.opts.draggable,\n          ...{\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\n            start: opts.start,\n            stop: opts.stop,\n            drag: opts.drag\n          }\n        });\n      }\n    });\n    return this;\n  }\n  dragIn(el, opts) {\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\n    return this;\n  }\n  droppable(el, opts, key, value) {\n    if (typeof opts.accept === 'function' && !opts._accept) {\n      opts._accept = opts.accept;\n      opts.accept = el => opts._accept(el);\n    }\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\n      } else if (opts === 'destroy') {\n        if (dEl.ddDroppable) {\n          // error to call destroy if not there\n          dEl.cleanDroppable();\n        }\n      } else if (opts === 'option') {\n        dEl.setupDroppable({\n          [key]: value\n        });\n      } else {\n        dEl.setupDroppable(opts);\n      }\n    });\n    return this;\n  }\n  /** true if element is droppable */\n  isDroppable(el) {\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\n  }\n  /** true if element is draggable */\n  isDraggable(el) {\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\n  }\n  /** true if element is draggable */\n  isResizable(el) {\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\n  }\n  on(el, name, callback) {\n    this._getDDElements(el).forEach(dEl => dEl.on(name, event => {\n      callback(event, DDManager.dragElement ? DDManager.dragElement.el : event.target, DDManager.dragElement ? DDManager.dragElement.helper : null);\n    }));\n    return this;\n  }\n  off(el, name) {\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\n    return this;\n  }\n  /** @internal returns a list of DD elements, creating them on the fly by default */\n  _getDDElements(els, create = true) {\n    let hosts = Utils.getElements(els);\n    if (!hosts.length) return [];\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\n    if (!create) {\n      list.filter(d => d);\n    } // remove nulls\n    return list;\n  }\n}","map":{"version":3,"names":["Utils","DDManager","DDElement","DDGridStack","resizable","el","opts","key","value","_getDDElements","forEach","dEl","ddResizable","cleanResizable","setupResizable","n","gridstackNode","grid","handles","getAttribute","autoHide","alwaysShowResizeHandle","start","stop","resize","draggable","ddDraggable","cleanDraggable","setupDraggable","drag","dragIn","droppable","accept","_accept","ddDroppable","cleanDroppable","setupDroppable","isDroppable","ddElement","disabled","isDraggable","isResizable","on","name","callback","event","dragElement","target","helper","off","els","create","hosts","getElements","length","list","map","e","init","filter","d"],"sources":["/Users/luis01/Desktop/MATINF/Asignaturas/Proyecto_Software/battleship/app_web/frontend/node_modules/gridstack/src/dd-gridstack.ts"],"sourcesContent":["/**\r\n * dd-gridstack.ts 10.1.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackElement, DDDragInOpt } from './types';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const n = dEl.el.gridstackNode;\r\n        const grid = n.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') || grid.opts.resizable.handles || 'e,s,se';\r\n        if (handles === 'all') handles = 'n,e,s,w,se,sw,ne,nw';\r\n        // NOTE: keep the resize handles as e,w don't have enough space (10px) to show resize corners anyway. limit during drag instead\r\n        // restrict vertical resize if height is done to match content anyway... odd to have it spring back\r\n        // if (Utils.shouldSizeToContent(n, true)) {\r\n        //   const doE = handles.indexOf('e') !== -1;\r\n        //   const doW = handles.indexOf('w') !== -1;\r\n        //   handles = doE ? (doW ? 'e,w' : 'e') : (doW ? 'w' : '');\r\n        // }\r\n        const autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/luis01/Desktop/MATINF/Asignaturas/Proyecto_Software/battleship/app_web/frontend/src/Pages/fleet.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Navbar } from \"../Components/Navbar\";\nimport { GridStack } from 'gridstack';\nimport '../Styles/fleet-style.css';\nimport 'gridstack/dist/gridstack.min.css';\nimport 'gridstack/dist/gridstack-extra.min.css';\nimport aircraftImg from '../Images/fleet/portaaviones.png';\nimport destroyImg from '../Images/fleet/destructor.png';\nimport patrolImg from '../Images/fleet/patrullero.png';\nimport submarineImg from '../Images/fleet/submarino.png';\nimport bshipImg from '../Images/fleet/acorazado.png';\nimport patrolImgRotated from '../Images/fleet/patrullero_rotado.png';\nimport submarineImgRotated from '../Images/fleet/submarino_rotado.png';\nimport bshipImgRotated from '../Images/fleet/acorazado_rotado.png';\nimport aircraftImgRotated from '../Images/fleet/portaaviones_rotado.png';\nimport destroyImgRotated from '../Images/fleet/destructor_rotado.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  obtenerPerfil,\n  moverBarcoInicial\n} = require('../../backend/src/controllers/perfilController');\nconst Perfil = require('../../backend/src/models/perfilModel');\nconst mongoose = require('mongoose');\nexport function Fleet() {\n  _s();\n  //     // Conectarse a la base de datos para obtener el tablero inicial del perfil\n  //     mongoose.connect('mongodb://localhost/BattleshipDB')\n  //     .then(async () => {\n  //     console.log('Conectado a MongoDB...');\n  //     try {\n  //         const perfil = { nombreId: 'usuario1'};\n  //         const req = { body: perfil };\n  //         const res = { json: () => {}, status: () => ({ send: () => {} }) }; // No hace nada\n  //         const perfilObtenido = await obtenerPerfil(req, res);   // TO-DO: recibir el perfil en el json de res y usar routes\n  //         const tableroInicial = perfilObtenido.tableroInicial;   // TO-DO: poder cambiar la skin\n  //         // const tableroInicial = [\n  //         //     [{ i: 1, j: 1 }, { i: 1, j: 2 }],\n  //         //     [{ i: 7, j: 1 }, { i: 8, j: 1 }, { i: 9, j: 1 }],\n  //         //     [{ i: 3, j: 10 }, { i: 4, j: 10 }, { i: 5, j: 10 }],\n  //         //     [{ i: 3, j: 6 }, { i: 4, j: 6 }, { i: 5, j: 6 }, { i: 6, j: 6 }],\n  //         //     [{ i: 10, j: 6 }, { i: 10, j: 7 }, { i: 10, j: 8 }, { i: 10, j: 9 }, { i: 10, j: 10 }]\n  //         //   ];\n\n  //     } catch (error) {\n  //         console.error('Error al obtener el perfil:', error);\n  //     } finally {\n  //         // Cierra la conexión a la base de datos al finalizar\n  //         mongoose.disconnect();\n  //     }\n  //     })\n  //     .catch(err => console.error('No se pudo conectar a MongoDB...', err));\n  // Contiene el tamaño y nombre de los barcos a usar\n  const shipInfo = {\n    'Aircraft': {\n      size: 5,\n      name: \"Aircraft\",\n      img: aircraftImg,\n      imgRotated: aircraftImgRotated\n    },\n    'Bship': {\n      size: 4,\n      name: \"Bship\",\n      img: bshipImg,\n      imgRotated: bshipImgRotated\n    },\n    'Sub': {\n      size: 3,\n      name: \"Sub\",\n      img: submarineImg,\n      imgRotated: submarineImgRotated\n    },\n    'Destroy': {\n      size: 3,\n      name: \"Destroy\",\n      img: destroyImg,\n      imgRotated: destroyImgRotated\n    },\n    'Patrol': {\n      size: 2,\n      name: \"Patrol\",\n      img: patrolImg,\n      imgRotated: patrolImgRotated\n    }\n  };\n  const boardDimension = 10;\n  const [board, setBoard] = useState(null); // Estado para almacenar la instancia de GridStack\n  const [count, setCount] = useState(0); // Estado para contar widgets\n\n  // Este efecto se ejecuta solo una vez después del montaje inicial del componente\n  useEffect(() => {\n    // Inicializamos el tablero con las siguientes propiedades\n    const board = GridStack.init({\n      float: true,\n      column: boardDimension,\n      // coordenadas indexadas a 0..9\n      row: boardDimension,\n      // coordenadas indexadas a 0..9\n      removable: true,\n      // eliminar widgets si se sacan del tablero\n      acceptWidgets: true,\n      // acepta widgets de otros tableros\n      disableResize: true,\n      // quita icono de resize en cada widget\n      cellHeight: \"80px\" // Establecer la altura de cada celda en 50px\n    });\n    setBoard(board); // Almacenar la instancia de GridStack en el estado\n  }, []);\n\n  // Función que añade un elemento a la cuadrícula\n  const addNewWidget = ship => {\n    //const shipName = shipInfo[ship].name;\n    const node = {\n      id: String(count),\n      // id para identificar el widget\n      locked: true,\n      // inmutable por otros widgets\n      //content: `<div onClick={handleItemClick}>${shipName}</div>`,\n      //content: '<img src={aircraftImg} />',\n      // content: shipInfo[ship].name,\n      content: `<img src=\"${shipInfo[ship].img}\" alt=\"${shipInfo[ship].name}\" style=\"width: 100%; height: 100%;\" />`,\n      // Mostrar imagen del barco con tamaño personalizado\n      //sizeToContent: true,\n      x: Math.round((boardDimension - 1) * Math.random()),\n      y: Math.round((boardDimension - 1) * Math.random()),\n      w: shipInfo[ship].size,\n      h: 1\n    };\n    if (board) {\n      // El tablero está inicializado\n      board.addWidget(node); // Añadir widget a la cuadrícula\n      setCount(prevCount => prevCount + 1); // Incrementar el contador\n\n      // Debug\n      //console.log(document.getElementsByClassName('gs-id-0'));\n      //console.log(node)\n      //console.log(board['engine']['nodes'])\n    }\n  };\n\n  // Función que añade un elemento a la cuadrícula\n  const addNewWidgetPos = (ship, x, y) => {\n    //const shipName = shipInfo[ship].name;\n    const node = {\n      id: String(count),\n      // id para identificar el widget\n      locked: true,\n      // inmutable por otros widgets\n      //content: `<div onClick={handleItemClick}>${shipName}</div>`,\n      //content: '<img src={aircraftImg} />',\n      // content: shipInfo[ship].name,\n      // content: `<img src=\"${shipInfo[ship].img}\" alt=\"${shipInfo[ship].name}\" style=\"width: 100%; height: 100%;\" />`, // Mostrar imagen del barco con tamaño personalizado\n      //sizeToContent: true,\n      x: Math.round((boardDimension - 1) * Math.random()),\n      y: Math.round((boardDimension - 1) * Math.random()),\n      // w: shipInfo[ship].size,\n      w: 2,\n      h: 1\n    };\n    if (board) {\n      // El tablero está inicializado\n      board.addWidget(node); // Añadir widget a la cuadrícula\n      setCount(prevCount => prevCount + 1); // Incrementar el contador\n\n      // Debug\n      //console.log(document.getElementsByClassName('gs-id-0'));\n      //console.log(node)\n      //console.log(board['engine']['nodes'])\n    }\n  };\n\n  // Función para manejar el clic izquierdo en los widgets del tablero\n  const handleItemClick = event => {\n    let clickedNode = event.target.gridstackNode;\n\n    // Si el nodo del clic no se encuentra directamente en el elemento \"grid-stack-item\",\n    // intentamos encontrar el nodo ascendente más cercano que sea un \"grid-stack-item\".\n    if (!clickedNode) {\n      const gridStackItem = event.target.closest('.grid-stack-item');\n      if (gridStackItem) {\n        clickedNode = gridStackItem.gridstackNode;\n      }\n    }\n    if (clickedNode) {\n      // Rotamos figura widget\n      const rotatedWidget = {\n        h: clickedNode.w,\n        w: clickedNode.h\n      };\n      const wantedAtribute = \"[gs-id=\\\"\" + clickedNode.id + \"\\\"]\";\n      const widgetTarget = document.querySelector(wantedAtribute);\n\n      // Obtener el tipo de barco del widgetTarget\n      let shipType = widgetTarget.querySelector('img').alt;\n      if (rotatedWidget.h > rotatedWidget.w) {\n        // Poner la imagen rotada\n        rotatedWidget.content = `<img src=\"${shipInfo[shipType].imgRotated}\" alt=\"${shipInfo[shipType].name}\" style=\"width: 100%; height: 100%;\" />`;\n      } else {\n        // Poner la imagen normal\n        rotatedWidget.content = `<img src=\"${shipInfo[shipType].img}\" alt=\"${shipInfo[shipType].name}\" style=\"width: 100%; height: 100%;\" />`;\n      }\n      if (widgetTarget) {\n        // Si no ha dado error\n        board.update(widgetTarget, rotatedWidget);\n      }\n\n      /*\n      // Rotamos contenido\n      let contenido = elemento[index].querySelector('.grid-stack-item-content');\n      contenido.style.transform = 'rotate(90deg)';\n      */\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fleet-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fleet-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"fleet-banner-container\",\n        children: \"Mi flota\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fleet-main-content-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-stack fleet-board\",\n          onClick: handleItemClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ship-buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNewWidget(\"Aircraft\"),\n          children: \"A\\xF1adir portaviones\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNewWidget(\"Bship\"),\n          children: \"A\\xF1adir acorazado\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNewWidget(\"Sub\"),\n          children: \"A\\xF1adir submarino\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNewWidget(\"Destroy\"),\n          children: \"A\\xF1adir destructor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ship-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNewWidget(\"Patrol\"),\n          children: \"A\\xF1adir patrullera\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n}\n_s(Fleet, \"jrv0QZwbj9j64Sj47tIUT1f/Ln4=\");\n_c = Fleet;\nvar _c;\n$RefreshReg$(_c, \"Fleet\");","map":{"version":3,"names":["useEffect","useState","Navbar","GridStack","aircraftImg","destroyImg","patrolImg","submarineImg","bshipImg","patrolImgRotated","submarineImgRotated","bshipImgRotated","aircraftImgRotated","destroyImgRotated","jsxDEV","_jsxDEV","obtenerPerfil","moverBarcoInicial","require","Perfil","mongoose","Fleet","_s","shipInfo","size","name","img","imgRotated","boardDimension","board","setBoard","count","setCount","init","float","column","row","removable","acceptWidgets","disableResize","cellHeight","addNewWidget","ship","node","id","String","locked","content","x","Math","round","random","y","w","h","addWidget","prevCount","addNewWidgetPos","handleItemClick","event","clickedNode","target","gridstackNode","gridStackItem","closest","rotatedWidget","wantedAtribute","widgetTarget","document","querySelector","shipType","alt","update","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/luis01/Desktop/MATINF/Asignaturas/Proyecto_Software/battleship/app_web/frontend/src/Pages/fleet.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Navbar } from \"../Components/Navbar\";\nimport { GridStack } from 'gridstack';\nimport '../Styles/fleet-style.css';\nimport 'gridstack/dist/gridstack.min.css';\nimport 'gridstack/dist/gridstack-extra.min.css';\n\nimport aircraftImg from '../Images/fleet/portaaviones.png';\nimport destroyImg from '../Images/fleet/destructor.png';\nimport patrolImg from '../Images/fleet/patrullero.png';\nimport submarineImg from '../Images/fleet/submarino.png';\nimport bshipImg from '../Images/fleet/acorazado.png';\n\nimport patrolImgRotated from '../Images/fleet/patrullero_rotado.png';\nimport submarineImgRotated from '../Images/fleet/submarino_rotado.png';\nimport bshipImgRotated from '../Images/fleet/acorazado_rotado.png';\nimport aircraftImgRotated from '../Images/fleet/portaaviones_rotado.png';\nimport destroyImgRotated from '../Images/fleet/destructor_rotado.png';\n\nconst { obtenerPerfil, moverBarcoInicial } = require('../../backend/src/controllers/perfilController');\nconst Perfil = require('../../backend/src/models/perfilModel');\nconst mongoose = require('mongoose');\n\n\nexport function Fleet() {    \n//     // Conectarse a la base de datos para obtener el tablero inicial del perfil\n//     mongoose.connect('mongodb://localhost/BattleshipDB')\n//     .then(async () => {\n//     console.log('Conectado a MongoDB...');\n//     try {\n//         const perfil = { nombreId: 'usuario1'};\n//         const req = { body: perfil };\n//         const res = { json: () => {}, status: () => ({ send: () => {} }) }; // No hace nada\n//         const perfilObtenido = await obtenerPerfil(req, res);   // TO-DO: recibir el perfil en el json de res y usar routes\n//         const tableroInicial = perfilObtenido.tableroInicial;   // TO-DO: poder cambiar la skin\n//         // const tableroInicial = [\n//         //     [{ i: 1, j: 1 }, { i: 1, j: 2 }],\n//         //     [{ i: 7, j: 1 }, { i: 8, j: 1 }, { i: 9, j: 1 }],\n//         //     [{ i: 3, j: 10 }, { i: 4, j: 10 }, { i: 5, j: 10 }],\n//         //     [{ i: 3, j: 6 }, { i: 4, j: 6 }, { i: 5, j: 6 }, { i: 6, j: 6 }],\n//         //     [{ i: 10, j: 6 }, { i: 10, j: 7 }, { i: 10, j: 8 }, { i: 10, j: 9 }, { i: 10, j: 10 }]\n//         //   ];\n\n\n\n\n\n//     } catch (error) {\n//         console.error('Error al obtener el perfil:', error);\n//     } finally {\n//         // Cierra la conexión a la base de datos al finalizar\n//         mongoose.disconnect();\n//     }\n//     })\n//     .catch(err => console.error('No se pudo conectar a MongoDB...', err));\n    // Contiene el tamaño y nombre de los barcos a usar\n    const shipInfo = {\n        'Aircraft': { size: 5, name: \"Aircraft\", img: aircraftImg, imgRotated: aircraftImgRotated},\n        'Bship': { size: 4, name: \"Bship\", img: bshipImg, imgRotated: bshipImgRotated},\n        'Sub': { size: 3, name: \"Sub\", img: submarineImg, imgRotated: submarineImgRotated},\n        'Destroy': { size: 3, name: \"Destroy\", img: destroyImg, imgRotated: destroyImgRotated},\n        'Patrol': { size: 2, name: \"Patrol\", img: patrolImg, imgRotated: patrolImgRotated},\n    };\n\n    const boardDimension = 10;\n\n    const [board, setBoard] = useState(null); // Estado para almacenar la instancia de GridStack\n    const [count, setCount] = useState(0); // Estado para contar widgets\n\n\n    // Este efecto se ejecuta solo una vez después del montaje inicial del componente\n    useEffect(() => {\n        // Inicializamos el tablero con las siguientes propiedades\n        const board = GridStack.init({\n            float: true,\n            column: boardDimension,     // coordenadas indexadas a 0..9\n            row: boardDimension,        // coordenadas indexadas a 0..9\n            removable: true,            // eliminar widgets si se sacan del tablero\n            acceptWidgets: true,        // acepta widgets de otros tableros\n            disableResize: true,        // quita icono de resize en cada widget\n            cellHeight: \"80px\", // Establecer la altura de cada celda en 50px\n        });\n        setBoard(board); // Almacenar la instancia de GridStack en el estado\n    }, []);\n\n\n    // Función que añade un elemento a la cuadrícula\n    const addNewWidget = (ship) => {\n        //const shipName = shipInfo[ship].name;\n        const node = {\n            id: String(count),      // id para identificar el widget\n            locked: true,           // inmutable por otros widgets\n            //content: `<div onClick={handleItemClick}>${shipName}</div>`,\n            //content: '<img src={aircraftImg} />',\n            // content: shipInfo[ship].name,\n            content: `<img src=\"${shipInfo[ship].img}\" alt=\"${shipInfo[ship].name}\" style=\"width: 100%; height: 100%;\" />`, // Mostrar imagen del barco con tamaño personalizado\n            //sizeToContent: true,\n            x: Math.round((boardDimension - 1) * Math.random()),\n            y: Math.round((boardDimension - 1) * Math.random()),\n            w: shipInfo[ship].size,\n            h: 1,\n        };\n        if (board) {    // El tablero está inicializado\n            board.addWidget(node);   // Añadir widget a la cuadrícula\n            setCount(prevCount => prevCount + 1); // Incrementar el contador\n            \n            // Debug\n            //console.log(document.getElementsByClassName('gs-id-0'));\n            //console.log(node)\n            //console.log(board['engine']['nodes'])\n        }\n    };\n\n    // Función que añade un elemento a la cuadrícula\n    const addNewWidgetPos = (ship, x, y) => {\n        //const shipName = shipInfo[ship].name;\n        const node = {\n            id: String(count),      // id para identificar el widget\n            locked: true,           // inmutable por otros widgets\n            //content: `<div onClick={handleItemClick}>${shipName}</div>`,\n            //content: '<img src={aircraftImg} />',\n            // content: shipInfo[ship].name,\n            // content: `<img src=\"${shipInfo[ship].img}\" alt=\"${shipInfo[ship].name}\" style=\"width: 100%; height: 100%;\" />`, // Mostrar imagen del barco con tamaño personalizado\n            //sizeToContent: true,\n            x: Math.round((boardDimension - 1) * Math.random()),\n            y: Math.round((boardDimension - 1) * Math.random()),\n            // w: shipInfo[ship].size,\n            w: 2,\n            h: 1,\n        };\n        if (board) {    // El tablero está inicializado\n            board.addWidget(node);   // Añadir widget a la cuadrícula\n            setCount(prevCount => prevCount + 1); // Incrementar el contador\n            \n            // Debug\n            //console.log(document.getElementsByClassName('gs-id-0'));\n            //console.log(node)\n            //console.log(board['engine']['nodes'])\n        }\n    };\n\n    // Función para manejar el clic izquierdo en los widgets del tablero\n    const handleItemClick = (event) => {\n        let clickedNode = event.target.gridstackNode;\n\n        // Si el nodo del clic no se encuentra directamente en el elemento \"grid-stack-item\",\n        // intentamos encontrar el nodo ascendente más cercano que sea un \"grid-stack-item\".\n        if (!clickedNode) {\n            const gridStackItem = event.target.closest('.grid-stack-item');\n            if (gridStackItem) {\n                clickedNode = gridStackItem.gridstackNode;\n            }\n        }\n    \n        if (clickedNode) {\n            // Rotamos figura widget\n            const rotatedWidget = {\n                h: clickedNode.w,\n                w: clickedNode.h,\n            }\n\n            const wantedAtribute = \"[gs-id=\\\"\" + clickedNode.id + \"\\\"]\";\n            const widgetTarget = document.querySelector(wantedAtribute);\n\n            // Obtener el tipo de barco del widgetTarget\n            let shipType = widgetTarget.querySelector('img').alt;\n            \n            if (rotatedWidget.h > rotatedWidget.w) {\n                // Poner la imagen rotada\n                rotatedWidget.content = `<img src=\"${shipInfo[shipType].imgRotated}\" alt=\"${shipInfo[shipType].name}\" style=\"width: 100%; height: 100%;\" />`;\n            } else {\n                // Poner la imagen normal\n                rotatedWidget.content = `<img src=\"${shipInfo[shipType].img}\" alt=\"${shipInfo[shipType].name}\" style=\"width: 100%; height: 100%;\" />`;\n            }\n            if (widgetTarget) {   // Si no ha dado error\n                board.update(widgetTarget, rotatedWidget)\n            }\n            \n            /*\n            // Rotamos contenido\n            let contenido = elemento[index].querySelector('.grid-stack-item-content');\n            contenido.style.transform = 'rotate(90deg)';\n            */\n        }\n    };\n\n\n    return (\n        <div className=\"fleet-page-container\">\n            <Navbar/>\n            <div className=\"fleet-container\">\n                <h1 className=\"fleet-banner-container\">\n                    Mi flota\n                </h1>\n                <div className=\"fleet-main-content-container\">\n                    <div className=\"grid-stack fleet-board\" onClick={handleItemClick}></div>\n                </div>\n            </div>\n            <div className=\"ship-buttons-container\">\n                    <div className=\"ship-buttons\">\n                        <button onClick={() => addNewWidget(\"Aircraft\")}>Añadir portaviones</button>\n                    </div>\n                    <div className=\"ship-buttons\">\n                        <button onClick={() => addNewWidget(\"Bship\")}>Añadir acorazado</button>\n                    </div>\n                    <div className=\"ship-buttons\">\n                        <button onClick={() => addNewWidget(\"Sub\")}>Añadir submarino</button>\n                    </div>\n                    <div className=\"ship-buttons\">\n                        <button onClick={() => addNewWidget(\"Destroy\")}>Añadir destructor</button>\n                    </div>\n                    <div className=\"ship-buttons\">\n                        <button onClick={() => addNewWidget(\"Patrol\")}>Añadir patrullera</button>\n                    </div>\n                </div>\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}